// <auto-generated />
using System;
using E_Commerce.Repository.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Commerce.Repository.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20250224221648_m1")]
    partial class m1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_Commerce.Domain.Entities.OrderEntiti.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuyerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeliveryMethodId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentIntentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryMethodId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("E_Commerce.Domain.Entities.OrderEntities.DeliveryMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DeliveryTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 10m,
                            DeliveryTime = "1-2 Days",
                            Description = "Fastest delivery time",
                            ShortName = "UPS1"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 5m,
                            DeliveryTime = "2-5 Days",
                            Description = "Get it within 5 days",
                            ShortName = "UPS2"
                        },
                        new
                        {
                            Id = 3,
                            Cost = 2m,
                            DeliveryTime = "5-10 Days",
                            Description = "Slower but cheap",
                            ShortName = "UPS3"
                        },
                        new
                        {
                            Id = 4,
                            Cost = 0m,
                            DeliveryTime = "1-2 Weeks",
                            Description = "Free! You get what you pay for",
                            ShortName = "FREE"
                        });
                });

            modelBuilder.Entity("E_Commerce.Domain.Entities.OrderEntities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("E_Commerce.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            Description = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit...",
                            Name = "Double Caramel Frappuccino",
                            PictureUrl = "images/products/sb-ang1.png",
                            Price = 200m
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CategoryId = 1,
                            Description = "Nunc viverra imperdiet enim. Fusce est. Vivamus a tellus.",
                            Name = "White Chocolate Mocha Frappuccino",
                            PictureUrl = "images/products/sb-ang2.png",
                            Price = 150m
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            CategoryId = 2,
                            Description = "Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc.",
                            Name = "Iced Cafe Latte",
                            PictureUrl = "images/products/sb-core1.png",
                            Price = 180m
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            CategoryId = 3,
                            Description = "Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.",
                            Name = "White Chocolate Mocha",
                            PictureUrl = "images/products/sb-core2.png",
                            Price = 300m
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 1,
                            CategoryId = 4,
                            Description = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit...",
                            Name = "Iced Caramel Macchiato",
                            PictureUrl = "images/products/sb-react1.png",
                            Price = 250m
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 5,
                            CategoryId = 4,
                            Description = "Aenean nec lorem. In porttitor. Donec laoreet nonummy augue.",
                            Name = "Hot Caramel Macchiato",
                            PictureUrl = "images/products/sb-ts1.png",
                            Price = 120m
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 2,
                            CategoryId = 5,
                            Description = "Fusce posuere, magna sed pulvinar ultricies, purus lectus malesuada libero.",
                            Name = "Iced Matcha Latte",
                            PictureUrl = "images/products/hat-core1.png",
                            Price = 10m
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 1,
                            CategoryId = 6,
                            Description = "Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc.",
                            Name = "Honey Cake",
                            PictureUrl = "images/products/hat-react1.png",
                            Price = 8m
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 1,
                            CategoryId = 6,
                            Description = "Fusce posuere, magna sed pulvinar ultricies, purus lectus malesuada libero.",
                            Name = "Blueberry Cheesecake",
                            PictureUrl = "images/products/hat-react2.png",
                            Price = 15m
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 3,
                            CategoryId = 7,
                            Description = "Nunc viverra imperdiet enim. Fusce est. Vivamus a tellus.",
                            Name = "Glazed Donuts",
                            PictureUrl = "images/products/glove-code1.png",
                            Price = 18m
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 1,
                            CategoryId = 7,
                            Description = "Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.",
                            Name = "Greek Salad",
                            PictureUrl = "images/products/glove-code2.png",
                            Price = 15m
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 4,
                            CategoryId = 4,
                            Description = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit.",
                            Name = "Iced Black Tea Lemonade",
                            PictureUrl = "images/products/glove-react1.png",
                            Price = 16m
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 4,
                            CategoryId = 4,
                            Description = "Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.",
                            Name = "Iced London Fog Tea Latte",
                            PictureUrl = "images/products/glove-react2.png",
                            Price = 14m
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 6,
                            CategoryId = 3,
                            Description = "Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc.",
                            Name = "Turkey Bacon, Cheddar & Egg White Sandwich",
                            PictureUrl = "images/products/boot-redis1.png",
                            Price = 250m
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 2,
                            CategoryId = 3,
                            Description = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit.",
                            Name = "Core Red Boots",
                            PictureUrl = "images/products/boot-core2.png",
                            Price = 189.99m
                        },
                        new
                        {
                            Id = 16,
                            BrandId = 2,
                            CategoryId = 3,
                            Description = "Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.",
                            Name = "Double-Smoked Bacon, Cheddar & Egg Sandwich",
                            PictureUrl = "images/products/boot-core1.png",
                            Price = 199.99m
                        },
                        new
                        {
                            Id = 17,
                            BrandId = 1,
                            CategoryId = 3,
                            Description = "Aenean nec lorem. In porttitor. Donec laoreet nonummy augue.",
                            Name = "Iced Chai Tea Latte with Oleato Golden Foam",
                            PictureUrl = "images/products/boot-ang2.png",
                            Price = 150m
                        },
                        new
                        {
                            Id = 18,
                            BrandId = 1,
                            CategoryId = 3,
                            Description = "Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc.",
                            Name = "Dragon Drink® Starbucks Refreshers® Beverage with Oleato Golden Foam",
                            PictureUrl = "images/products/boot-ang1.png",
                            Price = 180m
                        });
                });

            modelBuilder.Entity("E_Commerce.Domain.Entities.ProductBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Starbucks"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Costa"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cilantro"
                        },
                        new
                        {
                            Id = 4,
                            Name = "TBS"
                        },
                        new
                        {
                            Id = 5,
                            Name = "On The Run"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Caribou"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Krispy Kreme"
                        });
                });

            modelBuilder.Entity("E_Commerce.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Frappuccino"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Latte"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mocha"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Macchiato"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Matcha"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cake"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Donuts"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Salad"
                        });
                });

            modelBuilder.Entity("E_Commerce.Domain.Entities.OrderEntiti.Order", b =>
                {
                    b.HasOne("E_Commerce.Domain.Entities.OrderEntities.DeliveryMethod", "DeliveryMethod")
                        .WithMany()
                        .HasForeignKey("DeliveryMethodId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("E_Commerce.Domain.Entities.OrderEntities.Address", "ShippingAddress", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("DeliveryMethod");

                    b.Navigation("ShippingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.Domain.Entities.OrderEntities.OrderItem", b =>
                {
                    b.HasOne("E_Commerce.Domain.Entities.OrderEntiti.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.OwnsOne("E_Commerce.Domain.Entities.OrderEntities.ProductItemOrdered", "Product", b1 =>
                        {
                            b1.Property<int>("OrderItemId")
                                .HasColumnType("int");

                            b1.Property<string>("PictureUrl")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<string>("ProductName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("OrderItems");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");
                        });

                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.Domain.Entities.Product", b =>
                {
                    b.HasOne("E_Commerce.Domain.Entities.ProductBrand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Domain.Entities.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("E_Commerce.Domain.Entities.OrderEntiti.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
